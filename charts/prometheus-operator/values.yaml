# Default values for prometheus-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Provide a name in place of prometheus-operator for `app:` labels
##
nameOverride: ""

## Override the deployment namespace
##
namespaceOverride: ""

## Provide a k8s version to auto dashboard import script example: kubeTargetVersionOverride: 1.16.6
##
kubeTargetVersionOverride: ""

## Allow kubeVersion to be overridden while creating the ingress
##
kubeVersionOverride: ""

## Provide a name to substitute for the full names of resources
##
fullnameOverride: ""

## Labels to apply to all resources
##
commonLabels: {}
# scmhash: abc123
# myLabel: aakkmd

## If you are installing the chart using Argo CD, you may set the value to true to add the synx policy replace to the CRDs
##
argocdInstall: false

global:
  rbac:
    create: true

    ## Create ClusterRoles that extend the existing view, edit and admin ClusterRoles to interact with prometheus-operator CRDs
    ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
    createAggregateClusterRoles: false
    pspEnabled: false
    pspAnnotations: {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  ## Reference to one or more secrets to be used when pulling images
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  imagePullSecrets: []
  # - name: "image-pull-secret"
  # or
  # - "image-pull-secret"

## Prometheus-Operator v0.39.0 and later support TLS natively.
##
tls:
  enabled: true
  # Value must match version names from https://golang.org/pkg/crypto/tls/#pkg-constants
  tlsMinVersion: VersionTLS13
  # The default webhook port is 10250 in order to work out-of-the-box in GKE private clusters and avoid adding firewall rules.
  internalPort: 10250

## Admission webhook support for PrometheusRules resources added in Prometheus Operator 0.30 can be enabled to prevent incorrectly formatted
## rules from making their way into prometheus and potentially preventing the container from starting
admissionWebhooks:
  failurePolicy: Fail
  ## The default timeoutSeconds is 10 and the maximum value is 30.
  timeoutSeconds: 10
  enabled: true
  ## A PEM encoded CA bundle which will be used to validate the webhook's server certificate.
  ## If unspecified, system trust roots on the apiserver are used.
  caBundle: ""
  ## If enabled, generate a self-signed certificate, then patch the webhook configurations with the generated data.
  ## On chart upgrades (or if the secret exists) the cert will not be re-generated. You can use this to provide your own
  ## certs ahead of time if you wish.
  ##
  patch:
    enabled: true
    image:
      repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
      tag: v1.3.0
      sha: ""
      pullPolicy: IfNotPresent
    resources: {}
    ## Provide a priority class name to the webhook patching job
    ##
    priorityClassName: ""
    podAnnotations: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []

    ## SecurityContext holds pod-level security attributes and common container settings.
    ## This defaults to non root user with uid 2000 and gid 2000. *v1.PodSecurityContext  false
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    #
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 2000

  # Security context for create job container
  createSecretJob:
    securityContext: {}

  # Security context for patch job container
  patchWebhookJob:
    securityContext: {}

  # Use certmanager to generate webhook certs
  certManager:
    enabled: false
      # self-signed root certificate
    rootCert:
      duration: ""  # default to be 5y
    admissionCert:
      duration: ""  # default to be 1y
    # issuerRef:
    #   name: "issuer"
    #   kind: "ClusterIssuer"

## Namespaces to scope the interaction of the Prometheus Operator and the apiserver (allow list).
## This is mutually exclusive with denyNamespaces. Setting this to an empty object will disable the configuration
##
namespaces: {}
  # releaseNamespace: true
  # additional:
  # - kube-system

## Namespaces not to scope the interaction of the Prometheus Operator (deny list).
##
denyNamespaces: []

## Filter namespaces to look for prometheus-operator custom resources
##
alertmanagerInstanceNamespaces: []
alertmanagerConfigNamespaces: []
prometheusInstanceNamespaces: []
thanosRulerInstanceNamespaces: []

## The clusterDomain value will be added to the cluster.peer option of the alertmanager.
## Without this specified option cluster.peer will have value alertmanager-monitoring-alertmanager-0.alertmanager-operated:9094 (default value)
## With this specified option cluster.peer will have value alertmanager-monitoring-alertmanager-0.alertmanager-operated.namespace.svc.cluster-domain:9094
##
# clusterDomain: "cluster.local"

## Service account for Alertmanager to use.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  create: true
  name: ""

  ## Configuration for Prometheus operator service
  ##
service:
  annotations: {}
  labels: {}
  clusterIP: ""

## Port to expose on each node
## Only used if service.type is 'NodePort'
##
  nodePort: 30080

  nodePortTls: 30443

## Additional ports to open for Prometheus service
## ref: https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services
##
  additionalPorts: []

## Loadbalancer IP
## Only use if service.type is "LoadBalancer"
##
  loadBalancerIP: ""
  loadBalancerSourceRanges: []

  ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
  ##
  externalTrafficPolicy: Cluster

  ## Service type
  ## NodePort, ClusterIP, LoadBalancer
  ##
  type: ClusterIP

  ## List of IP addresses at which the Prometheus server service is available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []

## Annotations to add to the operator deployment
##
annotations: {}

## Labels to add to the operator pod
##
podLabels: {}

## Annotations to add to the operator pod
##
podAnnotations: {}

## Assign a PriorityClassName to pods if set
# priorityClassName: ""

## Define Log Format
# Use logfmt (default) or json logging
# logFormat: logfmt

## Decrease log verbosity to errors only
# logLevel: error

## If true, the operator will create and maintain a service for scraping kubelets
## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/helm/prometheus-operator/README.md
##
kubeletService:
  enabled: true
  namespace: kube-system
  # Use '{{ template "prometheus-operator.fullname" . }}-kubelet' by default
  name: ""

## Resource limits & requests
##
resources: {}
# limits:
#   cpu: 200m
#   memory: 200Mi
# requests:
#   cpu: 100m
#   memory: 100Mi

# Required for use in managed kubernetes clusters (such as AWS EKS) with custom CNI (such as calico),
# because control-plane managed by AWS cannot communicate with pods' IP CIDR and admission webhooks are not working
##
hostNetwork: false

## Define which Nodes the Pods are scheduled on.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for use with node taints
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
# - key: "key"
#   operator: "Equal"
#   value: "value"
#   effect: "NoSchedule"

## Assign custom affinity rules to the prometheus operator
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/e2e-az-name
  #         operator: In
  #         values:
  #         - e2e-az1
  #         - e2e-az2
dnsConfig: {}
  # nameservers:
  #   - 1.2.3.4
  # searches:
  #   - ns1.svc.cluster-domain.example
  #   - my.dns.search.suffix
  # options:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0
securityContext:
  fsGroup: 65534
  runAsGroup: 65534
  runAsNonRoot: true
  runAsUser: 65534

## Container-specific security context configuration
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

## Prometheus-operator image
##
image:
  repository: quay.io/prometheus-operator/prometheus-operator
  tag: v0.60.1
  sha: ""
  pullPolicy: IfNotPresent

## Prometheus image to use for prometheuses managed by the operator
##
# prometheusDefaultBaseImage: quay.io/prometheus/prometheus

## Alertmanager image to use for alertmanagers managed by the operator
##
# alertmanagerDefaultBaseImage: quay.io/prometheus/alertmanager

## Prometheus-config-reloader
##
prometheusConfigReloader:
  # image to use for config and rule reloading
  image:
    repository: quay.io/prometheus-operator/prometheus-config-reloader
    tag: v0.60.1
    sha: ""

  # resource config for prometheusConfigReloader
  resources:
    requests:
      cpu: 200m
      memory: 50Mi
    limits:
      cpu: 200m      
      memory: 50Mi

## Thanos side-car image when configured
##
thanosImage:
  repository: quay.io/thanos/thanos
  tag: v0.28.0
  sha: ""

  ## Set a Field Selector to filter watched secrets
  ##
secretFieldSelector: ""